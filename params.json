{"name":"Cocoa","tagline":"Password generator service","body":"# cocoa\r\nPassword generator service\r\n\r\n![demo graphic](https://farm6.staticflickr.com/5346/16766074333_e7702728b6_o.png \"cocoa demo\")\r\n\r\n## What can cocoa do for me?\r\n`cocoa` is a service which can generate 1 or many passwords using a mnemonic word list, and email you the result(s).\r\nThe password(s) is not logged, or saved anywhere.\r\n\r\n## How do I run cocoa?\r\n`cocoa` can be up and running in 3 steps! When run in a production environment, it's recommended that you use `NGINX`\r\nto terminate SSL, and reverse proxy to `cocoa`. Using a daemon like `upstart` (on Linux) to run `cocoa` is ideal. \r\n\r\n1.  Clone [this](https://github.com/avoidwork/cocoa) repository, or install from `npm`:\r\n    1.  `$ npm install cocoa`\r\n    2.  `$ ln -s node_modules/cocoa/config.json config.json`\r\n    3.  `$ ln -s node_modules/cocoa/index.js index.js`\r\n2.  (Optional) Edit `config.json` to configure your email server, etc.\r\n3.  Run via `node index.js`.\r\n\r\n## Request parameters\r\n#### words\r\n_Integer_ (3)\r\nThe amount of words to use\r\n\r\n#### passwords\r\n_Integer_ (1)\r\nThe amount of passwords to generate\r\n\r\n#### special\r\n_Boolean_ (false)\r\nRandomly adds common \"special\" characters to a password, including capitalization\r\n\r\n## Configuration\r\n``` \r\n{\r\n    \"auth\": /* Optional, see tenso authentication section */\r\n    \"compress\": false, /* Optional, enabled by default, disabled with SSL */\r\n    \"email\": { /* Optional, disabled by default */\r\n        \"enabled\": true,\r\n        \"host\": \"smtp.host\",\r\n        \"port\": 465,\r\n        \"secure\": true,\r\n        \"from\": \"You <you@yourdomain>\",\r\n        \"user\": \"you@yourdomain\",\r\n        \"pass\": \"password\"\r\n    },\r\n    \"headers\": { ... }, /* Optional, custom headers */\r\n    \"hostname\": \"localhost\", /* Optional, default is 'localhost' */\r\n    \"json\": 2, /* Optional, default indent for 'pretty' JSON */\r\n    \"logs\": { /* Optional */\r\n        \"level\": \"debug\",\r\n        \"stdout\": true,\r\n        \"dtrace\": true,\r\n        \"stack\": true\r\n    },\r\n    \"port\": 9090, /* Optional, default is 9090 */\r\n    \"rate\": {\r\n        \"enabled\": true,\r\n        \"limit\": 450, /* Maximum requests allowed before `reset` */\r\n        \"reset\": 900, /* TTL in seconds */\r\n        \"status\": 429, /* Optional HTTP status */\r\n        \"message\": \"Too many requests\",  /* Optional error message */\r\n        \"override\": function ( req, rate ) { ... } /* Override the default rate limiting */\r\n    },\r\n    \"session\": { /* Optional */\r\n        \"secret\": null,\r\n        \"store\": \"memory\", /* \"memory\" or \"redis\" */\r\n        \"redis\": /* See connect-redis for options */\r\n    },\r\n    \"ssl\": { /* Optional */\r\n        \"cert\": null,\r\n        \"key\": null\r\n    },\r\n    \"title\": \"My API\", /* Page title for browsable API */\r\n    \"uid\": N /* Optional, system account uid to drop to after starting with elevated privileges to run on a low port */\r\n}\r\n```\r\n\r\n\r\n## License\r\nCopyright (c) 2015 Jason Mulligan  \r\nLicensed under the BSD-3 license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}